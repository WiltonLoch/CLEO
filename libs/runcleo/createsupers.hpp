/*
 * ----- CLEO -----
 * File: createsupers.hpp
 * Project: runcleo
 * Created Date: Tuesday 17th October 2023
 * Author: Clara Bayley (CB)
 * Additional Contributors:
 * -----
 * Last Modified: Thursday 19th October 2023
 * Modified By: CB
 * -----
 * License: BSD 3-Clause "New" or "Revised" License
 * https://opensource.org/licenses/BSD-3-Clause
 * -----
 * Copyright (c) 2023 MPI-M, Clara Bayley
 * -----
 * File Description:
 * file for structure(s) to create a view of
 * superdroplets (on device) using some
 * initial conditions
 */

#ifndef CREATESUPERS_HPP
#define CREATESUPERS_HPP

#include <memory>
#include <vector>
#include <array>
#include <iostream>
#include <string>
#include <stdexcept>

#include <Kokkos_Core.hpp>

#include "../kokkosaliases.hpp"
#include "superdrops/superdrop.hpp"
#include "gridboxes/sortsupers.hpp"

class CreateSupers
/* functions (and struct holding data) to
create superdroplets given a type "FetchInitData"
that can return vectors for data on some
superdroplet inital conditions */
{
private:
  class GenSuperdrop
  /* struct holds vectors for data for the initial
  conditions of some superdroplets' properties and
  returns superdrops generated from them */
  {
  private:
    size_t nspacedims;
    std::unique_ptr<Superdrop::IDType::Gen> sdIdGen;      // pointer to superdrop id generator
    std::vector<SuperdropAttrs::SolutePtr> solutes;       // solute(s) stored in device memory space
    std::vector<unsigned int> sdgbxindexes;
    std::vector<double> coord3s;
    std::vector<double> coord1s;
    std::vector<double> coord2s;
    std::vector<double> radii;
    std::vector<double> msols;
    std::vector<unsigned long long> xis;

    std::array<double, 3> coords_at(const unsigned int kk) const;  
    
    inline SuperdropAttrs attrs_at(const unsigned int kk) const;

  public:
    template <typename FetchInitData>
    inline GenSuperdrop(const FetchInitData &fid);
      
    inline Superdrop operator()(const unsigned int kk) const;
  };

  template <typename FetchInitData>
  inline viewd_supers initialise_supers(const FetchInitData &fid) const;
  /* return an initialised view of superdrops on
  device memory by copying a host mirror view that
  is initialised using the FetchInitData instance */

  template <typename FetchInitData>
  inline viewd_supers::HostMirror
  initialise_supers_on_host(const viewd_constsupers supers,
                            const FetchInitData &fid) const;
  /* return mirror view of superdrops (on host memory)
  which have been initialised using data from a
  FetchInitData instance for their initial gbxindex,
  spatial coordinates and attributes */ 

  void ensure_initialisation_complete(const viewd_constsupers supers,
                                      const size_t size) const;
  /* ensure the number of superdrops in the view matches the
  size according to the initial conditions */

  inline void print_supers(const viewd_constsupers supers) const;
  /* print superdroplet information */

public:
  template <typename FetchInitData>
  viewd_supers operator()(const FetchInitData &fid) const
  /* create view of "totnsupers" number of superdrops
  (in device memory) which is ordered by the superdrops'
  gridbox indexes using the initial conditions
  generated by the referenced FetchInitData type */
  {
    std::cout << "\n--- create superdrops ---"
              << "\ninitialising";
    viewd_supers supers(initialise_supers(fid));

    std::cout << "\nsorting\n";
    supers = sort_supers(supers);

    ensure_initialisation_complete(supers, fid.get_size());
    print_supers(supers);
    std::cout << "--- create superdrops: success ---\n";

    return supers;
  }
};

template <typename FetchInitData>
inline viewd_supers
CreateSupers::initialise_supers(const FetchInitData &fid) const
/* return an initialised view of superdrops on
device memory by copying a host mirror view that
is initialised using the FetchInitData instance */
{
  /* create superdrops view on device */
  viewd_supers supers("supers", fid.get_totnsupers());
  
  /* initialise a mirror of supers view on host*/
  auto h_supers = initialise_supers_on_host(fid, supers);

  /* copy host view to device (h_supers to supers) */
  Kokkos::deep_copy(supers, h_supers); 
  
  return supers;
}

template <typename FetchInitData>
inline viewd_supers::HostMirror
CreateSupers::initialise_supers_on_host(const FetchInitData &fid,
                                        const viewd_supers supers) const
/* return mirror view of superdrops (on host memory)
which have been initialised using data from a
FetchInitData instance for their initial gbxindex,
spatial coordinates and attributes */
{
  const size_t totnsupers(supers.extent(0));
  const GenSuperdrop gen_superdrop(fid);
  
  auto h_supers = Kokkos::create_mirror_view(supers); // mirror of view in case view is on device
  for (size_t kk(0); kk < totnsupers; ++kk)
  {
    h_supers(kk) = gen_superdrop(kk);
  }
  
  return h_supers;
}

inline void CreateSupers::print_supers(const viewd_constsupers supers) const
/* print superdroplet information */
{
  for (size_t ; kk < supers.extent(0); ++kk)
  {
    std::cout << "SD: " << supers(kk).id.value
              << " [gbx, (coords), (attrs)]: [ "
              << supers(kk).get_sdgbxindex() << ", ("
              << supers(kk).get_coord3() << ", "
              << supers(kk).get_coord1() << ", "
              << supers(kk).get_coord2() << "), ("
              << supers(kk).is_solute() << ", "
              << supers(kk).get_radius() << ", "
              << supers(kk).get_msol() << ", "
              << supers(kk).get_xi() << ") ] \n";
  }
}

template <typename FetchInitData>
inline CreateSupers::GenSuperdrop::
    GenSuperdrop(const FetchInitData &fid)
    : nspacedims(fid.get_nspacedims()),
      sdIdGen(std::make_unique<Superdrop::IDType::Gen>()),
      solutes(0),
      sdgbxindexes(fid.sdgbxindex()),
      coord3s(fid.coord3()),
      coord1s(fid.coord1()),
      coord2s(fid.coord2()),
      radii(fid.radius()),
      msols(fid.msol()),
      xis(fid.xi())
{
  /* create 1 pointer-like type to solute
  properties which all superdroplets use */
  SuperdropAttrs::SolutePtr solute("solute");
  solutes.push_back(solute);
}

inline SuperdropAttrs
CreateSupers::GenSuperdrop::attrs_at(const unsigned int kk) const
/* helper function to return a superdroplet's attributes
at position kk in the initial conditions data. All
superdroplets created with same pointer-like
type to solute properties */
{
  const double radius(radii.at(kk));
  const double msol(msols.at(kk));
  const unsigned long long xi(xis.at(kk));
  const auto solute(solutes.at(0));

  return SuperdropAttrs(solute, xi, radius, msol);
}

inline Superdrop
CreateSupers::GenSuperdrop::operator()(const unsigned int kk) const
{
  const unsigned int sdgbxindex(sdgbxindexes.at(kk));
  const std::array<double, 3> coords312(coords_at(kk));
  const SuperdropAttrs attrs(attrs_at(kk));
  const auto sd_id(sdIdGen->next());

  return Superdrop(sdgbxindex, coords312[0],
                   coords312[1], coords312[2],
                   attrs, sd_id);
}

#endif // CREATESUPERS_HPP